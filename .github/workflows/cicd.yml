name: CICD

on:
  push:
    branches:
      - cicd
  pull_request:
    branches:
      - main

jobs:
    publish:
        runs-on:
            ubuntu-latest
        steps:
            ## Step 1: Configuration
            - uses: actions/checkout@v3
            - uses: s4u/maven-settings-action@v2.8.0
            - name: Set up JDK
              uses: actions/setup-java@v3
              with:
                distribution: 'temurin'
                java-version: '17'
            - uses: browser-actions/setup-chrome@latest
            - run: chrome --version
            ## Step 2: Docker Login and Image Build
            - name: Login to docker
              run: docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"
            - name: Build the docker image
              run: |
                ls
                printf "%s" "${{ secrets.CREDENTIALS_JSON }}" > backend/credentials.json
                docker build -t "${{ secrets.DOCKERHUB_USERNAME }}"/"${{ secrets.DOCKERHUB_IMAGE }}" -f docker/Dockerfile .

            ## Step 3: Image Execution and Wait to Image Start
            ## Step 3: Instalar Docker Compose
            - name: Install docker-compose
              run: |
                sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
                docker-compose --version  # Verifica que docker-compose se haya instalado correctamente

            - name: Replace values in docker-compose.yml
              run: |
                cd ./docker
                sed -i "s#change_me#$AWS_ACCESS_KEY_ID#g" docker-compose.yml
                sed -i "s#change_me#$AWS_SECRET_ACCESS_KEY#g" docker-compose.yml
                sed -i "s#change_me#$GOOGLE_DRIVE_FOLDER#g" docker-compose.yml
                sed -i "s#change_me#$APPLICATION_MAIL#g" docker-compose.yml
                sed -i "s#change_me#$APPLICATION_PASS_MAIL#g" docker-compose.yml
                sed -i "s#change_me#$MAIL_TEMPLATE_PATH#g" docker-compose.yml
                sed -i "s#change_me#$CREDENTIALS_FILE_PATH#g" docker-compose.yml
                sed -i "s#change_me#$AWS_OPENSEARCH_ENDPOINT#g" docker-compose.yml
                sed -i "s#change_me#$DB_USER#g" docker-compose.yml
                sed -i "s#change_me#$DB_URL#g" docker-compose.yml
                sed -i "s#change_me#$DB_PASSWORD#g" docker-compose.yml
              env:
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                GOOGLE_DRIVE_FOLDER: ${{ secrets.GOOGLE_DRIVE_FOLDER }}
                APPLICATION_MAIL: ${{ secrets.APPLICATION_MAIL }}
                APPLICATION_PASS_MAIL: ${{ secrets.APPLICATION_PASS_MAIL }}
                MAIL_TEMPLATE_PATH: ${{ secrets.MAIL_TEMPLATE_PATH }}
                CREDENTIALS_FILE_PATH: ${{ secrets.CREDENTIALS_FILE_PATH }}
                AWS_OPENSEARCH_ENDPOINT: ${{ secrets.AWS_OPENSEARCH_ENDPOINT }}
                DB_USER: ${{ secrets.DB_USER }}
                DB_URL: ${{ secrets.DB_URL }}
                DB_PASSWORD: ${{ secrets.DB_PASSWORD }}


            - name: Setup docker compose
              run: |
                cd ./docker
                docker-compose up -d
            - name: Give permissions to wait containers start script
              run: chmod +x waitContainers.sh
            - name: Wait for containers to start
              run: ./waitContainers.sh

            ## Step 4: Test execution
            - name: Run tests
              run: |
                sleep 30
                cd ./backend
                mvn -f pom.xml test

            ## Step 5: End Image Execution and Push image to Docker Hub
            - name: Stop docker compose
              run: |
                cd ./docker
                docker-compose down
            - name: Login to docker
              run: docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"
            - name: Push the docker image
              run: |
                cd ./docker
                docker push "${{ secrets.DOCKERHUB_USERNAME }}"/"${{ secrets.DOCKERHUB_IMAGE }}"